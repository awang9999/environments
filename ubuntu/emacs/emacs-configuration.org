#+TITLE: Zemacs configuration
#+author: Alexander Wang

* Introduction
  This configuration file contains the setup for several Emacs packages that I (Alexander Wang) need for my daily driver. Several ideas from this configuration are taken from [[https://github.com/neppramod/java_emacs][here]].

* Setup
  The structure of this configuration is as so. The Emacs configuration directory, ~EMACS_DIR~, is set to ~~/.emacs.d~. The initialization file, ~~/.emacs.d/init.el~, is the entry point for Emacs and uses the ~org-babel-load-file~ command to load this file. The speed up loading time, I have disabled garbage collection during startup. This is done by setting the ~gc-cons-threshold~ and ~gc-cons-percentage~ variables before and after loading this configuration file. Currently, ~gc-cons-threshold~ is set to 1 GB after startup. These variables determine how much memory can be allocated before garbage collection is commenced.

** Setup MELPA, ELPA, ORG
   In the following code block, we will initialize package repositories and configure ~use-package~. This package is used to install further packages.

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
			 ("org" . "https://orgmode.org/elpa/"))
)

(package-initialize)

; Fetch the list of packages available 
(unless package-archive-contents (package-refresh-contents))

; Install use-package
(setq package-list '(use-package))
(dolist (package package-list)
(unless (package-installed-p package) (package-install package)))
#+END_SRC

** Environment Setup
   Emacs fails to properly load environment variables in some operating systems so we can install ~exec-path-from-shell~ to fix that.

#+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell 
        :ensure t
	:config
	(exec-path-from-shell-initialize)
)
#+END_SRC

** Basic Setup
   This section contains several basic settings within emacs such as loading the language, disabling the toolbar, and setting up the autosave directory etc.

#+BEGIN_SRC emacs-lisp
  ;; Don't show the splash screen
  (setq inhibit-startup-message t)

  ;; Don't flash or ring the bell
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
  
  ;; Disable scrollbar, toolbar, and menubar.
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; Improves scrolling behavior when cursor moves off screen
  (setq scroll-conservatively most-positive-fixnum)

  ;; Cursor settings
  (setq-default cursor-type '(bar . 2))
  (blink-cursor-mode 0)

  ;; Set language environment to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  
  ;; Enable soft-wrap
  (global-visual-line-mode 1)

  ;; Move all the backup files to specific cache directory
  ;; This way you won't have annoying temporary files starting with ~(tilde) in each directory
  ;; Following setting will move temporary files to specific folders inside cache directory in EMACS_DIR
  ;; Credit: https://github.com/neppramod/java_emacs/blob/master/emacs-configuration.org

  (setq user-cache-directory (concat EMACS_DIR "cache"))
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
      url-history-file (expand-file-name "url/history" user-cache-directory)
      auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
      projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))

  ;; Org-mode issue with src block not expanding
  ;; This is a fix for bug in org-mode where <s TAB does not expand SRC block
  (when (version<= "9.2" (org-version))
  (require 'org-tempo))

  ;; Automatically pair brackets and braces
  (electric-pair-mode 1)

  ;; Turn on line numbers for programming modes and org-mode
  (add-hook 'prog-mode-hook 'linum-mode)
  (add-hook 'org-mode-hook 'linum-mode)
  (setq linum-format " %d") 

  ;; Set font
  (set-face-attribute 'default nil :font "Ubuntu Mono" :height 160)

  ;; Set tab-width to 4
  (setq-default tab-width 4)

  ;; Highlight matching brackets and braces
  (use-package paren
    :ensure nil
    :init
    (setq show-paren-delay 0)
    :config
    (show-paren-mode +1)
  )

  ;; Turn on tab-bar-mode for and configure it
  (add-hook 'prog-mode-hook 'tab-bar-mode)
#+END_SRC

* Visual Elements
** Theme
   I will try to stick to using the Nord colour scheme everywhere appropriate in Zemacs. The *doom-themes* package offers an easy solution to applying the Nord theme in Emacs. Additionally, *heaven-and-hell* provides us a function to toggle between two themes using a shortcut key. I will assign ~F6~ key to toggle between the light and dark Nord theme and ~C-c F6~ to set to default theme.

#+BEGIN_SRC emacs-lisp
  ;; Installing doom-themes and setting the Nord theme 
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-nord t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
)

(use-package heaven-and-hell
  :ensure t
  :init
  (setq heaven-and-hell-theme-type 'dark)
  (setq heaven-and-hell-themes '((light . doom-nord-light)
                                 (dark . doom-nord))
  )
  :hook (after-init . heaven-and-hell-init-hook)
  :bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
         ("<f6>" . heaven-and-hell-toggle-theme))
)
#+END_SRC

** Disable ansi color in compilation mode
  This will help eliminate weird escape sequences during project compilation. Code src block taken from: [[https://endlessparentheses.com/ansi-colors-in-the-compilation-buffer-output.html][source]].
#+BEGIN_SRC emacs-lisp
(require 'ansi-color)
(defun endless/colorize-compilation ()
  "Colorize from `compilation-filter-start' to `point'."
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region
     compilation-filter-start (point))
  )
)

(add-hook 'compilation-filter-hook #'endless/colorize-compilation)
#+END_SRC

** Pdf-tools and Midnight Mode
*pdf-tools* improves the pdf viewing experience drastically and *midnight-mode* allows us to set a pdf contrast that adheres to the Nord theme. In *pdf-view-mode*, the keys ~!,@,#,$,%~ can be used to set the midnight mode to each of the themes explained below.

#+BEGIN_SRC emacs-lisp
;; Installing pdf-tools and friends

(use-package pdf-tools
  :ensure t
)

(require 'pdf-occur)
(require 'pdf-history)
(require 'pdf-tools)
(require 'pdf-outline)
(require 'pdf-annot)

(pdf-tools-install)

;; Make pdf-view the default major mode for .pdf extension files
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))

;; Personal custom configuration for pdf-view-mode
(defun zander/pdf-view-config ()
  ;; Set default view mode to fit page to window
  (setq-default pdf-view-display-size 'fit-page)
  ;; Produce finer grained pdf resizing
  (setq pdf-view-resize-factor 1.1)
  ;; Enable pdf-view-themed-minor mode
  (pdf-view-themed-minor-mode)
  ;; Bind ! key to toggle pdf-view-themed-minor-mode
  (local-set-key (kbd "!") (quote pdf-view-themed-minor-mode))

  (auto-revert-mode)
)

(add-hook 'pdf-view-mode-hook 'zander/pdf-view-config)
#+END_SRC

** Org Mode configuration
Org Mode is a useful major mode for writing, literate programming, planning, and GTD. My configuration is largely inspired by this blog post: [[https://protesilaos.com/codelog/2020-07-18-emacs-concept-org-tweaked-focus][here]]. In summary, I alter the size of headings based on its level.

#+BEGIN_SRC emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 2.0))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.5))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)

;; Alters the window padding to 1 and turns off the dividers.
(use-package emacs
  :config
  (setq window-divider-default-right-width 1)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-places t)
  (window-divider-mode -1)
)

;; Add org-indent-mode to org-mode-hook
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

*** olivetti-mode

*olivetti-mode* is a minor mode that turns *org-mode* into a better writing environment. On the surface, it centers the main writing area, constrains the document within a certain number of character spaces to create a more aesthetic *org-mode* environment.

#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :ensure
  :config
  (setq-default olivetti-body-width 0.65)
  (setq-default olivetti-minimum-body-width 72)
  (setq olivetti-recall-visual-line-mode-entry-state t)
  :hook
  (org-mode . olivetti-mode)
  :bind ("C-c o" . olivetti-mode)
)
#+END_SRC

* Custom Packages
  This section contains packages for general convenience.
** Vterm
   Vterm is an improvement on term and usually requires the machine to have Cmake as a dependency.
#+BEGIN_SRC emacs-lisp
(use-package vterm
    :ensure t
    :bind
    ("C-c z" . vterm)
)
#+END_SRC

** Yasnippet
The *Yasnippet* package offers a variety of snippets for several major modes. 
#+BEGIN_SRC emacs-lisp
;; Install and configure yasnippet
(use-package yasnippet
  :ensure t
  :hook
  (prog-mode . yas-minor-mode)
)

(use-package yasnippet-snippets
  :ensure t
  :after yas)
(yas-global-mode 1)
(yas-load-directory "~/.emacs.d/snippets/")
#+END_SRC

** Key-Chord
*Key-chord* allows us to bind regular keys to commands without using Ctrl or Meta prefixes.
#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
  :ensure t
  :init 
  :config (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.4)
  (setq key-chord-one-key-delay 0.2) ; default 0.2
)
#+END_SRC

** Projectile
Projectile helps with navigation within projects. It recognizes several source control managed folders like *git, mercurial, maven, etc.* and a folder with an empty *.projectile* file. The binding ~C-c p~ is used to invoke any projectile command.
#+BEGIN_SRC emacs-lisp
(use-package projectile 
  :ensure t
  :init (projectile-mode +1)
  :config 
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
)   
#+END_SRC

** Ivy
*Ivy* is a generic completion mechanism in Emacs. It replaces *icomplete-mode* for suggesting completions within Emacs. *Counsel* takes this one step further by remapping several build-in Emacs funcitons with counsel replacements that guarantee usage of the *Ivy* completion system.

#+BEGIN_SRC emacs-lisp

(use-package counsel
    :ensure t)
;; Basic configuration taken from https://github.com/abo-abo/swiper
;; and https://oremacs.com/swiper/#introduction
(ivy-mode)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(setq ivy-count-format "(%d/%d) ")

;; Ivy-based interface to standard commands
(global-set-key (kbd "C-s") 'swiper-isearch)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "<f2> j") 'counsel-set-variable)
(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-c v") 'ivy-push-view)
(global-set-key (kbd "C-c V") 'ivy-pop-view)

;; Ivy-based interface to shell and system tools
(global-set-key (kbd "C-c c") 'counsel-compile)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c L") 'counsel-git-log)
(global-set-key (kbd "C-c k") 'counsel-rg)
(global-set-key (kbd "C-c m") 'counsel-linux-app)
(global-set-key (kbd "C-c n") 'counsel-fzf)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-c J") 'counsel-file-jump)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(global-set-key (kbd "C-c w") 'counsel-wmctrl)

;; Ivy-resume and other commands that assist with resuming the last ivy-based completion
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "C-c b") 'counsel-bookmark)
(global-set-key (kbd "C-c d") 'counsel-descbinds)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c o") 'counsel-outline)
(global-set-key (kbd "C-c t") 'counsel-load-theme)
(global-set-key (kbd "C-c F") 'counsel-org-file)
#+END_SRC

** Which Key
Some package prefix commands like ~C-c p~ or ~C-c h~ provides several options following it. *which-key* will visually guide you through the available options.
#+BEGIN_SRC 
(use-package which-key 
  :ensure t 
  :init
  (which-key-mode)
)
#+END_SRC

** Company
*Company* or Complete Anything provides in-place auto-completion.
#+BEGIN_SRC emacs-lisp
;; Install and configure company mode
(use-package company
    :ensure t)
;; Enable completion everywhere
(add-hook 'after-init-hook 'global-company-mode) 

;; Add yasnippet support for all company backends
;; https://github.com/syl20bnr/spacemacs/pull/179
(defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")

(defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+END_SRC

* Programming related
** Various programming major modes
#+BEGIN_SRC emacs-lisp
;; Installing and configuring markdown-mode
(use-package markdown-mode
  :mode ("\\.md\\'" . markdown-mode))

;; Installing json-mode
(use-package json-mode
  :ensure t)

;; Installing yaml mode
(use-package yaml-mode
  :ensure t)
#+END_SRC

** Language Server Protocol (LSP)
This section configures several packages closely related to LSP.
*** Dap Mode
Emacs Debug Adapter Protocol (DAP) Mode allows us to debug programs. We will integrate ~dap-mode~ with ~dap-hydra~, a package that shows what keys we can use to enable various options and also move through code at runtime. We additionally install ~dap-java~.

#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :ensure t
  :after (lsp-mode)
  :functions dap-hydra/nil
  :config
  :bind (:map lsp-mode-map
         ("<f5>" . dap-debug)
         ("M-<f5>" . dap-hydra))
  :hook ((dap-mode . dap-ui-mode)
    (dap-session-created . (lambda (&_rest) (dap-hydra)))
    (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))
#+END_SRC

*** FlyCheck
*Flycheck* is a package that will display warnings and errors at run-time.
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
)
#+END_SRC

*** Treemacs
*Treemacs* provides a UI element to display the file structure of a project as a tree. We will also install *lsp-treemacs* so we can integrate this feature with *lsp*. Additionally, we will bind ~M-9~ to show the list of errors.
#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :ensure t
  :commands lsp-treemacs-errors-list
  :bind (:map lsp-mode-map
         ("M-9" . lsp-treemacs-errors-list)))

(use-package treemacs
  :ensure t
  :commands (treemacs)
  :after (lsp-mode))
#+END_SRC

*** LSP UI
*Lsp-ui* integrates *lsp* with several UI elements (such as *flycheck* or *treemacs*). You can use ~C-c 1 T~ to toggle the UI elements and I also have a custom key mapping to help navigate between symbols using ~M-,~, ~M-.~, and ~M-?~.

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
:ensure t
:after (lsp-mode)
:bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references))
:init (setq lsp-ui-doc-delay 1.5
      lsp-ui-doc-position 'bottom
	  lsp-ui-doc-max-width 100
))
#+END_SRC

*** LSP Ivy
*lsp-ivy* replaces the native ~xref-find-apropos~ package for symbol navigation with the helm version. Essentially, this will help you find the symbols (classes, enums, interfaces, etc) within your workspace using helm.

#+BEGIN_SRC
(use-package ivy-lsp
:ensure t
:after (lsp-mode)
:commands (lsp-ivy-workspace-symbol)
:init (define-key lsp-mode-map [remap xref-find-apropos] #'lsp-ivy-workspace-symbol))
#+END_SRC

*** LSP
This is the crux of this entire section. Here, we install the language server protocol package and integrate it with ~which-key~. That allows us to get additional help after using the ~lsp~ prefix key, ~C-c l~.

Start the LSP server in a java project using ~C-c l s s~ or just type the prefix and follow the instructions provided by ~which-key~. Additionally, I added some memory management settings as suggested [[https://emacs-lsp.github.io/lsp-mode/page/performance/][here]].

#+BEGIN_SRC 
(use-package lsp-mode
:ensure t
:hook (
   (lsp-mode . lsp-enable-which-key-integration)
   (java-mode . #'lsp-deferred)
)
:init (setq 
    lsp-keymap-prefix "C-c l" ; this is for which-key integration documentation, need to use lsp-mode-map
    lsp-enable-file-watchers nil
    read-process-output-max (* 1024 1024)  ; 1 mb
    lsp-completion-provider :capf
    lsp-idle-delay 0.250
)
:config 
    (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
    (with-eval-after-load 'lsp-intelephense
    (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
	(define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
)
#+END_SRC

*** LSP servers
In this section, we install several LSP servers for a variety of languages.
#+BEGIN_SRC 
(use-package lsp-java
  :ensure t
  :config (add-hook 'java-mode-hook 'lsp)
)

(use-package ccls
  :ensure t
  :config
  (add-hook 'c-mode 'lsp)
  (add-hook 'c++-mode 'lsp)
  (add-hook 'objc-mode 'lsp)
)

(use-package lsp-python-ms
  :ensure t
  :config
  (add-hook 'python-mode 'lsp)
)

(use-package typescript-language-server
  :ensure t
  :config
  (add-hook 'js2-mode 'lsp)
  (add-hook 'rjsx-mode 'lsp)
  (add-hook 'typescript-mode 'lsp)
)

(use-package vscode-css-languageserver-bin
  :ensure t
  :config
  (add-hook 'web-mode 'lsp)
  (add-hook 'css-mode 'lsp)
  (add-hook 'scss-mode 'lsp)
  (add-hook 'sass-mode 'lsp)
  (add-hook 'less-css-mode 'lsp)
)

(use-package vscode-html-languageserver-bin
  :ensure t
  :config
  (add-hook 'web-mode 'lsp)
  (add-hook 'css-mode 'lsp)
  (add-hook 'scss-mode 'lsp)
  (add-hook 'sass-mode 'lsp)
  (add-hook 'less-css-mode 'lsp)
)
#+END_SRC

* LaTeX related
** AUCTeX
*AUCTeX* is THE integrated environment for editing LaTeX and TeX files in Emacs (And several other TeX related files).

#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure 
    auctex
  :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
)
#+END_SRC
