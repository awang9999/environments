#+TITLE: Zemacs configuration
#+author: Alexander Wang

* Introduction
  This configuration file contains the setup for several Emacs packages that I (Alexander Wang) need for my daily driver. Several ideas from this configuration are taken from [[https://github.com/neppramod/java_emacs][here]].

* Setup
  The structure of this configuration is as so. The Emacs configuration directory, ~EMACS_DIR~, is set to ~~/.emacs.d~. The initialization file, ~~/.emacs.d/init.el~, is the entry point for Emacs and uses the ~org-babel-load-file~ command to load this file. The speed up loading time, I have disabled garbage collection during startup. This is done by setting the ~gc-cons-threshold~ and ~gc-cons-percentage~ variables before and after loading this configuration file. Currently, ~gc-cons-threshold~ is set to 1 GB after startup. These variables determine how much memory can be allocated before garbage collection is commenced.

** Setup MELPA, ELPA, ORG
  In the following code block, we will initialize package repositories and configure ~use-package~. This package is used to install further packages.
#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
			  ("org" . "https://orgmode.org/elpa/")
))


(package-initialize)

; Fetch the list of packages available 
(unless package-archive-contents (package-refresh-contents))

; Install use-package
(setq package-list '(use-package))
(dolist (package package-list)
(unless (package-installed-p package) (package-install package)))
#+END_SRC

#+RESULTS:

** Environment Setup
   Emacs fails to properly load environment variables in some operating systems so we can install ~exec-path-from-shell~ to fix that.

  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell 
        :ensure t)
    (exec-path-from-shell-initialize)
  #+END_SRC

  #+RESULTS:
  : ((MANPATH . ) (PATH . /usr/local/texlive/2022/bin/x86_64-linux:/usr/local/texlive/2022/bin/x86_64-linux:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin))

** Basic Setup
   This section contains several basic settings within emacs such as loading the language, disabling the toolbar, and setting up the autosave directory etc.

#+BEGIN_SRC emacs-lisp
  ;; Don't show the splash screen
  (setq inhibit-startup-message t)

  ;; Don't flash or ring the bell
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
  
  ;; Disable scrollbar, toolbar, and menubar.
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; Improves scrolling behavior when cursor moves off screen
  (setq scroll-conservatively most-positive-fixnum)

  ;; Cursor settings
  (setq-default cursor-type '(bar . 2))
  (blink-cursor-mode 0)

  ;; Set language environment to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  
  ;; Enable soft-wrap
  (global-visual-line-mode 1)

  ;; Move all the backup files to specific cache directory
  ;; This way you won't have annoying temporary files starting with ~(tilde) in each directory
  ;; Following setting will move temporary files to specific folders inside cache directory in EMACS_DIR
  ;; Credit: https://github.com/neppramod/java_emacs/blob/master/emacs-configuration.org

  (setq user-cache-directory (concat EMACS_DIR "cache"))
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
      url-history-file (expand-file-name "url/history" user-cache-directory)
      auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
      projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))

  ;; Org-mode issue with src block not expanding
  ;; This is a fix for bug in org-mode where <s TAB does not expand SRC block
  (when (version<= "9.2" (org-version))
  (require 'org-tempo))

  ;; Automatically pair brackets and braces
  (electric-pair-mode 1)

  ;; Turn on line numbers for programming modes
  (add-hook 'prog-mode-hook 'linum-mode)
  (setq linum-format " %d") 

  ;; Set font
  (set-face-attribute 'default nil :font "Ubuntu Mono" :height 160)

  ;; Set tab-width to 4
  (setq-default tab-width 4)

  ;; Highlight matching brackets and braces
  (use-package paren
    :ensure nil
    :init
    (setq show-paren-delay 0)
    :config
    (show-paren-mode +1)
  )

  ;; Turn on tab-bar-mode for and configure it
  (add-hook 'prog-mode-hook 'tab-bar-mode)
#+END_SRC

#+RESULTS:
| yas-minor-mode | tab-bar-mode | linum-mode |

* Visual Elements
** Theme
   I will try to stick to using the Nord colour scheme everywhere appropriate in Zemacs. The *doom-themes* package offers an easy solution to applying the Nord theme in Emacs. Additionally, *heaven-and-hell* provides us a function to toggle between two themes using a shortcut key. I will assign ~F6~ key to toggle between the light and dark Nord theme and ~C-c F6~ to set to default theme.

#+BEGIN_SRC emacs-lisp
  ;; Installing doom-themes and setting the Nord theme 
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-nord t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
)

(use-package heaven-and-hell
  :ensure t
  :init
  (setq heaven-and-hell-theme-type 'dark)
  (setq heaven-and-hell-themes
  '((light . doom-nord-aurora)
          (dark . doom-nord))
  )
  :hook (after-init . heaven-and-hell-init-hook)
  :bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
         ("<f6>" . heaven-and-hell-toggle-theme))
)
#+END_SRC

#+RESULTS:
: heaven-and-hell-toggle-theme

** Disable ansi color in compilation mode
  This will help eliminate weird escape sequences during project compilation.
#+BEGIN_SRC emacs-lisp
(defun my/ansi-colorize-buffer ()
  (let ((buffer-read-only nil))
  (ansi-color-apply-on-region (point-min) (point-max))))

  (use-package ansi-color
    :ensure t
    :config
  (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
)
#+END_SRC

#+RESULTS:
: t

** Pdf-tools and Midnite Mode
*pdf-tools* improves the pdf viewing experience drastically and *midnite-mode* allows us to set a pdf contrast that adheres to the Nord theme. In *pdf-view-mode*, the keys ~!,@,#,$,%~ can be used to set the midnite mode to each of the themes explained below.
#+BEGIN_SRC emacs-lisp
  ;; Installing pdf-tools and friends
(use-package pdf-tools
  :ensure t)

;;; Code:
(pdf-tools-install)

(require 'pdf-occur)
(require 'pdf-history)
(require 'pdf-tools)
(require 'pdf-outline)
(require 'pdf-annot)

;; midnite mode hook
(add-hook 'pdf-view-mode-hook (lambda ()
                                (pdf-view-midnight-minor-mode))) ; automatically turns on midnight-mode for pdfs

(setq pdf-view-midnight-colors '("#d8dee9" . "#3b4252"))

(defun pdf-no-filter ()
  "View pdf without colour filter."
  (interactive)
  (pdf-view-midnight-minor-mode -1)
  )

;; change midnite mode colours functions
(defun pdf-midnite-nord-original ()
  "Set pdf-view-midnight-colors to Nord colour scheme colours."
  (interactive)
  (setq pdf-view-midnight-colors '("#d8dee9" . "#3b4252")) ; Nord colour palette
  (pdf-view-midnight-minor-mode)
  )

(defun pdf-midnite-nord-amber ()
  "Set pdf-view-midnight-colors to Nord colour scheme yellow on slate gray."
  (interactive)
  (setq pdf-view-midnight-colors '("#ebcb8b" . "#3b4252")) ; Nord colour palette
  (pdf-view-midnight-minor-mode)
  )

(defun pdf-midnite-nord-green ()
  "Set pdf-view-midnight-colors to Nord colour scheme green on slate gray."
  (interactive)
  (setq pdf-view-midnight-colors '("#a3be8c" . "#3b4252")) ; Nord colour palette
  (pdf-view-midnight-minor-mode)
  )

(defun pdf-midnite-nord-blue ()
  "Set pdf-view-midnight-colors to Nord colour scheme blue on slate gray."
  (interactive)
  (setq pdf-view-midnight-colors '("#88c0d0" . "#3b4252")) ; Nord colour palette
  (pdf-view-midnight-minor-mode)
  )

(defun pdf-midnite-colour-schemes ()
  "Midnight mode colour schemes bound to keys"
  (local-set-key (kbd "!") (quote pdf-no-filter))
  (local-set-key (kbd "@") (quote pdf-midnite-nord-amber))
  (local-set-key (kbd "#") (quote pdf-midnite-nord-green))
  (local-set-key (kbd "$") (quote pdf-midnite-nord-blue))
  (local-set-key (kbd "%") (quote pdf-midnite-nord-original))
  )

(add-hook 'pdf-view-mode-hook 'pdf-midnite-colour-schemes)
#+END_SRC

#+RESULTS:
| pdf-midnite-colour-schemes | (lambda nil (pdf-view-midnight-minor-mode)) | pdf-tools-enable-minor-modes |

** Org Mode configuration
Org Mode is a useful major mode for writing, literate programming, planning, and GTD. My configuration is largely inspired by this blog post: [[https://protesilaos.com/codelog/2020-07-18-emacs-concept-org-tweaked-focus][here]]. In summary, I alter the size of headings based on its level.

#+BEGIN_SRC emacs-lisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 2.0))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.5))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)

;; Alters the window padding to 1 and turns off the dividers.
(use-package emacs
  :config
  (setq window-divider-default-right-width 1)
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-places t)
  (window-divider-mode -1)
)

;; Add org-indent-mode to org-mode-hook
(add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

*** olivetti-mode

*olivetti-mode* is a minor mode that turns *org-mode* into a better writing environment. On the surface, it centers the main writing area, constrains the document within a certain number of character spaces to create a more aesthetic *org-mode* environment.

#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :ensure
  :config
  (setq-default olivetti-body-width 0.65)
  (setq-default olivetti-minimum-body-width 72)
  (setq olivetti-recall-visual-line-mode-entry-state t)
  :hook
  (org-mode . olivetti-mode)
  :bind ("C-c o" . olivetti-mode)
)
#+END_SRC

* Custom Packages
  This section contains packages for general convenience.
** Vterm
   Vterm is an improvement on term and usually requires the machine to have Cmake as a dependency.
#+BEGIN_SRC emacs-lisp
(use-package vterm
    :ensure t
    :bind
    ("C-c v" . vterm)
)
#+END_SRC

** Yasnippet
The *Yasnippet* package offers a variety of snippets for several major modes. 
#+BEGIN_SRC emacs-lisp
;; Install and configure yasnippet
(use-package yasnippet
  :ensure t
  :hook
  (prog-mode . yas-minor-mode)
)
(use-package yasnippet-snippets
  :ensure t
  :after yas)
(yas-global-mode 1)
(yas-load-directory "~/.emacs.d/snippets/")
#+END_SRC

** Key-Chord
*Key-chord* allows us to bind regular keys to commands without using Ctrl or Meta prefixes.
#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
:ensure t
:init 
:config (key-chord-mode 1)
(setq key-chord-two-keys-delay 0.4)
(setq key-chord-one-key-delay 0.2) ; default 0.2
)
#+END_SRC

** Projectile
Projectile helps with navigation within projects. It recognizes several source control managed folders like *git, mercurial, maven, etc.* and a folder with an empty *.projectile* file. The binding ~C-c p~ is used to invoke any projectile command.
#+BEGIN_SRC emacs-lisp
(use-package projectile 
  :ensure t
  :init (projectile-mode +1)
  :config 
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
)   
#+END_SRC

#+RESULTS:
: t

** Helm
Helm is a suggestion framework that changes the default way in which files, options, words, are suggested in various built-in features to a more intuitive way. We will replace many of the built in functions with the helm version to make use of this package.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init 
  (helm-mode 1)
  (progn (setq helm-buffers-fuzzy-matching t))
  :bind
  (("C-c h" . helm-command-prefix))
  (("M-x" . helm-M-x))
  (("C-x C-f" . helm-find-files))
  (("C-x b" . helm-buffers-list))
  (("C-c b" . helm-bookmarks))
  (("C-c f" . helm-recentf))   ;; Add new key to recentf
  (("C-c g" . helm-grep-do-git-grep))
)  ;; Search using grep in a git project
#+END_SRC

#+RESULTS:
: helm-grep-do-git-grep

Use ~C-c h~ to access further helm options as this is the helm prefix we have assigned. Additionally, we enabled fuzzy matching which allows for our search query to not be the exact thing we are searching for. (E.g. 'aurroa' will suggest 'aurora')

Helm descbinds is a package that allows us to search for keyboard shortcuts within the active modes in the current buffer. This can be helpful in exposing keyboard shortcuts for commands you want to use. Use ~C-c b~ to bring up the *helm-descbinds* window.

#+BEGIN_SRC 
(use-package helm-descbinds
  :ensure t
  :bind ("C-h b" . helm-descbinds)
)
#+END_SRC

*Helm-swoop* allows to quickly search for text under the cursor or new text within the current file. You can type ~js~ to search and jump to a target line and ~jp~ to move back to the point where we initiated the search. We can continue to use ~C-s~ and ~C-r~ the same way and can type ~M-m~ to invoke *helm-swoop* from *isearch-mode*

#+BEGIN_SRC
(use-package helm-swoop 
:ensure t
:chords
("js" . helm-swoop)
("jp" . helm-swoop-back-to-last-point)
:init
(bind-key "M-m" 'helm-swoop-from-isearch isearch-mode-map)

;; If you prefer fuzzy matching
(setq helm-swoop-use-fuzzy-match t)

;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)

;; If this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows nil)

;; Split direction. 'split-window-vertically or 'split-window-horizontally
(setq helm-swoop-split-direction 'split-window-vertically)

;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color nil)

;; ;; Go to the opposite side of line from the end or beginning of line
(setq helm-swoop-move-to-line-cycle t)

)
#+END_SRC 

** Avy Goto
*Avy* allows you to jump to characters, words, or lines within a file. Use ~jc~, ~jw~, or ~jl~ to quickly jump within the current file.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :chords
  ("jc" . avy-goto-char)
  ("jw" . avy-goto-word-1)
  ("jl" . avy-goto-line)
)
#+END_SRC

** Which Key
Some package prefix commands like ~C-c p~ or ~C-c h~ provides several options following it. *which-key* will visually guide you through the available options.
#+BEGIN_SRC 
(use-package which-key 
  :ensure t 
  :init
  (which-key-mode)
)
#+END_SRC
es
* Programming related
** Various programming major modes
#+BEGIN_SRC emacs-lisp
;; Installing and configuring markdown-mode
(use-package markdown-mode
  :mode ("\\.md\\'" . markdown-mode))

;; Installing json-mode
(use-package json-mode
  :ensure t)

;; Installing yaml mode
(use-package yaml-mode
  :ensure t)
#+END_SRC
** Language Server Protocol (LSP)
This section configures several packages closely related to LSP.
*** Company
*Company* or Complete Anything provides in-place auto-completion.
#+BEGIN_SRC emacs-lisp
  ;; Install and configure company mode
  (use-package company
    :ensure t)
  ;; Enable completion everywhere
  (add-hook 'after-init-hook 'global-company-mode) 
#+END_SRC

*** Dap Mode
Emacs Debug Adapter Protocol (DAP) Mode allows us to debug programs. We will integrate ~dap-mode~ with ~dap-hydra~, a package that shows what keys we can use to enable various options and also move through code at runtime. We additionally install ~dap-java~.

#+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :ensure t
  :after (lsp-mode)
  :functions dap-hydra/nil
  :config
  :bind (:map lsp-mode-map
         ("<f5>" . dap-debug)
         ("M-<f5>" . dap-hydra))
  :hook ((dap-mode . dap-ui-mode)
    (dap-session-created . (lambda (&_rest) (dap-hydra)))
    (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))
#+END_SRC
*** FlyCheck
*Flycheck* is a package that will display warnings and errors at run-time.
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
)
#+END_SRC
*** Treemacs
*Treemacs* provides a UI element to display the file structure of a project as a tree. We will also install *lsp-treemacs* so we can integrate this feature with *lsp*. Additionally, we will bind ~M-9~ to show the list of errors.
#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :ensure t
  :commands lsp-treemacs-errors-list
  :bind (:map lsp-mode-map
         ("M-9" . lsp-treemacs-errors-list)))

(use-package treemacs
  :ensure t
  :commands (treemacs)
  :after (lsp-mode))
#+END_SRC

*** LSP UI
*Lsp-ui* integrates *lsp* with several UI elements (such as *flycheck* or *treemacs*). You can use ~C-c 1 T~ to toggle the UI elements and I also have a custom key mapping to help navigate between symbols using ~M-,~, ~M-.~, and ~M-?~.

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
:ensure t
:after (lsp-mode)
:bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references))
:init (setq lsp-ui-doc-delay 1.5
      lsp-ui-doc-position 'bottom
	  lsp-ui-doc-max-width 100
))
#+END_SRC

*** Helm LSP
*Helm-lsp* replaces the native ~xref-find-apropos~ package for symbol navigation with the helm version. Essentially, this will help you find the symbols (classes, enums, interfaces, etc) within your workspace using helm.

#+BEGIN_SRC
(use-package helm-lsp
:ensure t
:after (lsp-mode)
:commands (helm-lsp-workspace-symbol)
:init (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
#+END_SRC

*** LSP
This is the crux of this entire section. Here, we install the language server protocol package and integrate it with ~which-key~. That allows us to get additional help after using the ~lsp~ prefix key, ~C-c l~.

Start the LSP server in a java project using ~C-c l s s~ or just type the prefix and follow the instructions provided by ~which-key~. Additionally, I added some memory management settings as suggested [[https://emacs-lsp.github.io/lsp-mode/page/performance/][here]].

#+BEGIN_SRC 
(use-package lsp-mode
:ensure t
:hook (
   (lsp-mode . lsp-enable-which-key-integration)
   (java-mode . #'lsp-deferred)
)
:init (setq 
    lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
    lsp-enable-file-watchers nil
    read-process-output-max (* 1024 1024)  ; 1 mb
    lsp-completion-provider :capf
    lsp-idle-delay 0.250
)
:config 
    (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
    (with-eval-after-load 'lsp-intelephense
    (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
	(define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
)
#+END_SRC

*** LSP servers
In this section, we install several LSP servers for a variety of languages.
#+BEGIN_SRC 
(use-package lsp-java
  :ensure t
  :config (add-hook 'java-mode-hook 'lsp)
)
#+END_SRC
* LaTeX related
** AUCTeX
*AUCTeX* is THE integrated environment for editing LaTeX and TeX files in Emacs (And several other TeX related files).

#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure 
    auctex
  :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
)
#+END_SRC
